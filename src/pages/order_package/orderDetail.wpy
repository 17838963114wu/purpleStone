<style lang='less'>
.container {
    padding-bottom: 100rpx;
}
.order_item {
    padding: 28rpx 26rpx;
    border-bottom: 12rpx solid rgba(242,242,242,1);
    .item_header {
        font-size:28rpx;
        font-family:PingFangSC;
        font-weight:400;
        margin-bottom: 32rpx;
        padding-bottom: 26rpx;
        border-bottom: 1rpx solid #F2F2F2;
        .date {
            color:rgba(49,49,49,1);
        }
        .status {
            color:rgba(204,0,0,1);
        }
    }
    .order_product_list {
        margin-bottom: 15rpx;
        border-bottom: 1px solid rgba(242,242,242,1);
        padding-bottom: 28rpx;
        image {
            width: 140rpx;
            height: 104rpx;
            margin-right: 29rpx;
        }
        .product_type {
            text-align: right;
            padding-top: 18rpx;
            .price {
                font-size:24rpx;
                font-weight:400;
                color:rgba(49,49,49,1);
                margin-bottom: 37rpx;
            }
            .count {
                font-size:24rpx;
                font-weight:400;
                color:rgba(153,153,153,1);
            }
        }
        .name {
            font-size:28rpx;
            font-weight:400;
            color:rgba(49,49,49,1);
            width: 361rpx;
            margin-bottom: 23rpx;
        }
        .type {
            font-size:24rpx;
            font-weight:400;
            color:rgba(153,153,153,1);
        }
    }
    .item_footer {
        padding-right: 25rpx;
        margin-top: 29rpx;
        font-size:24rpx;
        font-family:PingFangSC;
        font-weight:400;
        color:rgba(34,34,34,1);
        width: 100%;
        .footer_count {
            margin-right: 18rpx;
        }
        text {
            font-size:28rpx;
            font-family:PingFangSC-Medium;
            font-weight:500;
            color:rgba(34,34,34,1);
        }
    }
}
.order_note {
	font-size:28rpx;
	font-family:PingFangSC;
	font-weight:400;
	color:rgba(34,34,34,1);
	border-bottom: 12rpx solid rgba(242,242,242,1);
	.ship, .ship_number, .message, .totalPrice {
		padding: 54rpx 25rpx 39rpx 25rpx;
		border-bottom: 1px solid rgba(242,242,242,1);
	}
	.ship_number {
		view {
			color:rgba(153,153,153,1);
		}
	}
	.totalPrice {
		view {
			color:rgba(204,0,0,1);
		}
    }
    .message {
        view {
            font-size:28rpx;
            font-family:PingFangSC;
            font-weight:400;
            color:rgba(153,153,153,1);
        }
    }
}
.detail_footer {
	padding: 36rpx 25rpx;
	font-size:24rpx;
	line-height: 47rpx;
	font-weight:400;
	color:rgba(34,34,34,1);
}
</style>

<!-- 订单详情 -->
<template>
	<view class='container'>
		<address
			:hasAddress="hasAddress"
            :name.sync="name"
            :address.sync="address"
            :phone.sync="phone"
            :isGo.sync ="isGo"
		></address>
		<view class="order_list">
            <view class="order_item">
                <view class="item_header flex flex-j-c-sb">
                    <view class="date">订单号：{{ list.orderSn }}</view>
                    <view class="status">{{ list.name }}</view>
                </view>
                <repeat for="{{list.orderGoodsDOList}}" key="index" index="index" item="item">
                    <view class="order_product_list flex flex-j-c-sb">
                            <view class="product_info flex">
                                <image src="{{item.picUrl}}" mode="aspectFill"></image>
                                <view>
                                    <view class="name">{{ item.goodsName }}</view>
                                    <view class="type">
                                        {{ item.specifications }}
                                    </view>
                                </view>
                            </view>
                            <view class="product_type">
                                <view class="price">￥{{ item.price }}</view>
                                <view class="count">x{{ item.number }}</view>
                            </view>
                    </view>
                </repeat>
                <view class="item_footer flex flex-j-c-sb flex-a-i-baseline">
                    <view class="time-left"></view>
                    <view class="flex flex-a-i-center">
                        <view class="footer_count">共{{ list.orderGoodsDOList.length }}件</view>
                        <view>总计：<text>￥{{ list.goodsPrice }}</text></view>
                    </view>
                </view>
            </view>
        </view>
		<view class="order_note">
			<view class="ship flex flex-j-c-sb">
				<label>支付方式</label>
                <view style="color:#cc0000" wx:if="{{list.orderstatusDO.id == 101}}">未付款</view>
				<view wx:else>{{list.payType==1?'线下支付':'微信支付'}}</view>
			</view>
            <view class="ship flex flex-j-c-sb">
				<label>配送方式</label>
				<view>{{list.shippingType == 0 ? '线下自提' : '普通快递'}}</view>
			</view>
			<view class="ship_number flex flex-j-c-sb" wx:if="{{list.shipSn}}">
				<label>物流单号</label>
				<view>{{list.shipSn}}</view>
			</view>
			<view class="message flex flex-j-c-sb">
				<label>留言</label>
				<view class="{{list.message?'':'wumessage'}}">{{list.message?list.message:'*暂无'}}</view>
			</view>
			<view class="totalPrice flex flex-j-c-sb">
				<label>合计</label>
				<view>￥{{ list.goodsPrice }}</view>
			</view>
		</view>
		<view class="detail_footer">
			<view>成交时间：{{list.createTime}}</view>
			<view wx:if='{{list.payTime}}'>审核时间：{{list.payTime}}</view>
			<view wx:if="{{list.shipTime}}">发货时间：{{list.shipTime}}</view>
		</view>
	</view>
</template>

<script>
import wepy from 'wepy'
// import ajax from '@/config.js';
import Address from '@/components/address'
import order from '@/apiJs/order.js'
import Tips from '@/utils/tips.js'
export default class OrderDetail extends wepy.page {
  config = {
    navigationBarTitleText: '订单详情'
  };

  data = {
    isGo: false,
    hasAddress: true,
    send: false,
    list: {},
    name: '',
    phone: '',
    address: ''
  };

  components = {
    'address': Address
  };

  methods = {};

  events = {};

  watch = {};

  computed = {};

  async onLoad (options) {
    var param = {
      orderId: options.orderId
    }
    order.getOrderById(param).then(res => {
      this.list = res.data
      this.name = this.list.consignee
      this.address = this.list.address
      this.phone = this.list.mobile
      this.$apply()
    })
  };

  onShow () { };
}
</script>
